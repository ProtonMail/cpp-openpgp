// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from open_pgp.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace ProtonMail {

struct Address;
struct EncryptPackage;
struct OpenPgpKey;

class OpenPgp {
public:
    virtual ~OpenPgp() {}

    static std::shared_ptr<OpenPgp> create_instance();

    static std::shared_ptr<OpenPgp> create_instance_with_keys(const Address & address);

    virtual bool add_address() = 0;

    virtual bool remove_address() = 0;

    virtual bool clean_addresses() = 0;

    /**generat new key pair */
    virtual OpenPgpKey generate_key() = 0;

    /**check is primary key passphrase ok */
    virtual bool check_passphrase(const std::string & private_key, const std::string & passphrase) = 0;

    /**encrypt message */
    virtual std::string encrypt_message(const std::string & address_id, const std::string & plain_text) = 0;

    virtual std::string decrypt_message(const std::string & encrypt_text, const std::string & passphras) = 0;

    virtual EncryptPackage encrypt_attachment(const std::string & address_id, const std::vector<uint8_t> & unencrypt_data, const std::string & file_name) = 0;

    virtual std::vector<uint8_t> decrypt_attachment(const std::vector<uint8_t> & key, const std::vector<uint8_t> & data, const std::string & passphras) = 0;

    /**TODO : not done and not inuse */
    virtual std::vector<uint8_t> decrypt_attachment_with_password(const std::vector<uint8_t> & key, const std::vector<uint8_t> & data, const std::string & password) = 0;

    virtual std::vector<uint8_t> get_public_key_session_key(const std::vector<uint8_t> & keyPackage, const std::string & privateKey, const std::string & passphrase) = 0;

    virtual std::vector<uint8_t> get_symmetric_session_key(const std::vector<uint8_t> & keyPackage, const std::string & password) = 0;

    virtual std::vector<uint8_t> get_new_public_key_package(const std::vector<uint8_t> & session, const std::string & publicKey) = 0;

    virtual std::vector<uint8_t> get_new_symmetric_key_package(const std::vector<uint8_t> & session, const std::string & password) = 0;

    virtual std::string encrypt_message_aes(const std::string & plain_text, const std::string & password) = 0;

    virtual std::string decrypt_message_aes(const std::string & encrypted_message, const std::string & password) = 0;

    virtual std::string encryptMailboxPWD(const std::string & unencrypted_pwd, const std::string & salt) = 0;

    virtual std::string decryptMailboxPWD(const std::string & encrypted_pwd, const std::string & salt) = 0;
};

}  // namespace ProtonMail
