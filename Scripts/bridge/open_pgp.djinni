open_pgp_key = record {
    key_id : string;
	public_key : string;
	private_key : string;
    finger_print : string;
    # false default only used when update keys
    isUpdated : bool;
}

encrypt_package = record {
	key_package : binary;
	data_package : binary;
}

encrypt_sign_package = record {
    encrypted : string;
    signature : string;
}

decrypt_sign_verify = record {
    plain_text : string;
    verify : bool;
}

address = record {
    address_id : string;
    #optional
    address_name : string;
    keys: list<open_pgp_key>;
}

#open_pgp_key_manager = interface +c {
#    static create_instance() : open_pgp_key_manager;
#}


#generat new key with email address. Fix the UserID issue in protonmail system. on Feb 28, 17
#static generate_key_with_email(email : string, passphrase : string, bits : i32) : open_pgp_key;
# generate new key
#static generate_new_key(user_id : string, email : string, passphrase : string, bits : i32) : open_pgp_key;

open_pgp = interface +c {

    # create and init an instance those instance have addresses manager build in
    # if want deal with single key should use the static functions
    static create_instance() : open_pgp;
    # create and init an instance with addresses
	static create_instance_with_address(address : address) : open_pgp;
	static create_instance_with_addresses(address : list<address>) : open_pgp;

    #update single private key password
    static update_single_passphrase(private_key : string, old_passphrase : string, new_passphrase : string) : string;
    #disable/enable debug model
    static enable_debug(isDebug : bool);
    #check is private key passphrase ok
    static check_passphrase(private_key : string, passphrase : string) : bool;
    #update multiple pgp private keys return are new keys
    static update_keys_passphrase(private_keys : list<open_pgp_key>, old_passphrase : string, new_passphrase : string) : list<open_pgp_key>;

    #decrypt message use the address key ring with password
    static decrypt_message_with_address(address : address, encrypt_text : string, passphras : string) : string;
    #decrypt attachment use the address key ring with password
    static decrypt_attachment_with_address(address : address, key : binary, data : binary, passphras : string) : binary;

    #Random bits
    static random_bits(bits : i32) : binary;

    #add a new address into addresses list
    add_address(address : address) : bool;
    #remove a exsit address from the list based on address id
    remove_address(address_id : string) : bool;
    #clean address list
    clean_addresses() : bool;


    #generat new key pair
    generate_key(user_name : string, domain : string, passphrase : string, bits : i32) : open_pgp_key;

    # old functions blow


    #update the information carried in the packet. //TODO need add more parameters
    update_private_info(private_key : string);


    #encrypt message use address id
    encrypt_message(address_id : string, plain_text : string, passphras: string, trim : bool) : string;
    #encrypt message use public key
    encrypt_message_single_key(public_key : string, plain_text : string, private_key: string, passphras: string, trim : bool) : string;
    encrypt_message_single_binary_pub_key(public_key : binary, plain_text : string, private_key: string, passphras: string, trim : bool) : string;
    decrypt_message(encrypt_text : string, passphras : string) : string;
    decrypt_message_single_key(encrypt_text : string, private_key : string, passphras : string) : string;

    #for signature
    encrypt_message_sign_external(public_key : string, private_key : string, plain_text : string, passphras: string) : encrypt_sign_package;
    decrypt_message_verify_single_key(private_key: string, passphras: string, encrypted : string, signature : string) : decrypt_sign_verify;
    decrypt_message_verify(passphras: string, encrypted : string, signature : string) : decrypt_sign_verify;

    sign_detached(private_key : string, plain_text : string, passphras: string) : string;
    sign_detached_verify_single_pub_key(public_key: string, signature : string, plain_text : string) : bool;
    sign_detached_verify_single_binary_pub_key(public_key: binary, signature : string, plain_text : string) : bool;
    sign_detached_verify_single_private_key(private_key: string, signature : string, plain_text : string) : bool;
    sign_detached_verify(signature : string, plain_text : string) : bool;

    static findKeyid(encrypt_text : string, private_key : string) : bool;


    encrypt_attachment(address_id : string, unencrypt_data : binary, file_name : string, passphras: string) : encrypt_package;
    encrypt_attachment_single_key(public_key : string, unencrypt_data : binary, file_name : string, private_key: string, passphras: string) : encrypt_package;

    encrypt_attachment_single_binary_key(public_key : binary, unencrypt_data : binary, file_name : string, private_key: string, passphras: string) : encrypt_package;
    decrypt_attachment(key : binary, data : binary, passphras : string) : binary;
    decrypt_attachment_single_key(key : binary, data : binary, private_key : string, passphras : string) : binary;

	decrypt_attachment_with_password(key : binary, data : binary, password : string) : binary;

    get_public_key_session_key(keyPackage : binary, passphrase : string): binary;
    get_public_key_session_key_single_key(keyPackage : binary, privateKey : string, passphrase : string): binary;

	get_symmetric_session_key(keyPackage : binary, password : string): binary;
	get_new_public_key_package(session : binary, publicKey : string) : binary;
    get_new_public_key_package_binary(session : binary, publicKey : binary) : binary;
	get_new_symmetric_key_package(session : binary, password : string): binary;

    encrypt_message_aes(plain_text : string, password : string) : string;
    decrypt_message_aes(encrypted_message : string, password : string) : string;

    encrypt_mailbox_pwd(unencrypted_pwd : string, salt : string) : string;
    decrypt_mailbox_pwd(encrypted_pwd : string, salt : string) : string;

    read_clearsigned_message(signed_message : string) : string;

    static split_message(encrypted: string) : encrypt_package;
    static combine_packages(key: binary, data: binary) : string;

    #test functions
    throw_an_exception(): i32;

    #PBE
    encrypt_hash_cbc(plain_text : string, password : string) : string;
    decrypt_hash_cbc(encrypted_text : string, password : string) : string;

}


srp_proofs = record {
	client_ephemeral : binary;
	client_proof : binary;
	expected_server_proof : binary;
}

srp_client = interface +c {
    #ExpandHash
	static expand_hash(input : binary): binary;
    #SRP
	static generate_proofs(bit_length : i32, modulus_repr : binary, server_ephemeral_repr : binary, hashed_password_repr : binary): srp_proofs;
	static generate_Verifier(bit_length : i32, modulus_repr : binary, hashed_password_repr : binary) : binary;
}

lib_version = interface +c {
    #get lib version
    static get_lib_version(): string;
    #get pgp version
    static get_pgp_version(): string;
    #get vcard version
    static get_vcard_version(): string;
}


b_crypt_hash = interface +c {
#base 64 *DotSlash encode
#base 64 *DotSlash decode

#hash
    static hash_string(password: string, salt: string): string;
}
#ezvcard part

i_formatted_name = interface +c {
    getLanguage() : string;
    setLanguage(language: string);

    getParameter(name : string) : string;
    getValue() : string;

    static create_instance(name : string) : i_formatted_name;
}

i_address = interface +c {
    getStreetAddress() : string;
    getExtendedAddress() : string;
    getLocality() : string;
    getRegion() : string;
    getPostalCode() : string;
    getCountry() : string;
    getTypes() : list<string>;
    getPoBox() : string;
    getPoBoxes() : list<string>;

    static create_instance(type: string, street:string, extendstreet: string, locality: string, region:string, zip: string, country:string, pobox: string) : i_address;
}

i_organization = interface +c {
    getValues() : list<string>;
    getValue() : string;
    static create_instance(type: string, value: string) : i_organization;
}

i_telephone = interface +c {
    getTypes() : list<string>;
    getText() : string;

    static create_instance(type: string, number: string) : i_telephone;
}

i_email = interface +c {
    getParameter(name : string) : string;
    getValue() : string;
    getTypes() : list<string>;
    getGroup() : string;
    setGroup(g: string);
    static create_instance(type: string, email : string, group : string) : i_email;
}

i_title = interface +c {
    getTitle() : string;
    getType() : string;

    static create_instance(type: string, value: string) : i_title;
}

i_url = interface +c {
    getValue() : string;
    getType() : string;
    static create_instance(type: string, value: string) : i_url;
}

i_uid = interface +c {
    getValue() : string;

    static create_instance(uuid: string) : i_uid;
}

i_structured_name = interface +c {
    getFamily() : string;
    getGiven() : string;

    static create_instance() : i_structured_name;
}

i_nickname = interface +c {
    getNickname() : string;
    getType() : string;
    getValues() : list<string>;
    static create_instance(type: string, value: string) : i_nickname;
}

i_photo = interface +c {

}

i_product_id = interface +c {

}

i_v_card_version = interface +c {
    equals(rhs : i_v_card_version) : bool;

    static VCard2_1() : i_v_card_version;
    static VCard3_0() : i_v_card_version;
    static VCard4_0() : i_v_card_version;
}

i_mailer = interface +c {

}

i_birthday = interface +c {
    getDate() : string;
    getType() : string;
    getText() : string;
    static create_instance(type: string, date: string) : i_birthday;
}

i_anniversary = interface +c {
    getDate() : string;
    getType() : string;
    static create_instance(type: string, date: string) : i_anniversary;
}

i_note = interface +c {
    getType() : string;
    getNote() : string;
    static create_instance(type: string, note: string) : i_note;
}

i_p_m_custom = interface +c {
    getValue() : string;
    getType() : string;
    getGroup() : string;
    static create_instance(type: string, value: string) : i_p_m_custom;
}

i_p_m_sign = interface +c {
    getValue() : string;
    getType() : string;
    getGroup() : string;
    static create_instance(type: string, value: string) : i_p_m_sign;
}

i_p_m_encrypt = interface +c {
    getValue() : string;
    getType() : string;
    getGroup() : string;
    static create_instance(type: string, value: string) : i_p_m_encrypt;
}

i_p_m_scheme = interface +c {
    getValue() : string;
    getType() : string;
    getGroup() : string;
    static create_instance(type: string, value: string) : i_p_m_scheme;
}

i_p_m_mime_type = interface +c {
    getValue() : string;
    getType() : string;
    getGroup() : string;
    static create_instance(type: string, value: string) : i_p_m_mime_type;
}

i_gender = interface +c {
    getGender() : string;
    getText() : string;
    static create_instance(sex: string, text: string) : i_gender;
}



#static create_instance(type: string, email : string, group : string) : i_email;
i_key = interface +c {
    getText() : string;
    setText(text : string);

    getBinary() : binary;
    setBinary(data: binary);

    getGroup() : string;
    setGroup(g: string);
    getPref() : i32;
    setPref(pref: i32);

}


i_v_card = interface +c {

    getPropertyTypes() : list<string>;

    getVersion() : i_v_card_version;
    setVersion(version: i_v_card_version);

    getFormattedName() : i_formatted_name;
    setFormattedName(formattedName : i_formatted_name);
    clearFormattedName();

    getTelephoneNumbers() : list<i_telephone>;
    addTelephone(cell: i_telephone);
    setTelephones(cells: list<i_telephone>);
    clearTelephones();

    getEmails() : list<i_email>;
    addEmail(email : i_email);
    #set will replace all exsiting
    setEmails(emails : list<i_email>);
    clearEmails();

    getKeys() : list<i_key>;
    addKey(key : i_key);
    #set will replace all exsiting
    setKeys(keys : list<i_key>);
    clearKeys();

    getUid() : i_uid;
    setUid(uuid : i_uid);

    getAddresses() : list<i_address>;
    addAddress(addr : i_address);
    setAddresses(addrs : list<i_address>);
    clearAddresses();

    getOrganization() : i_organization;
    addOrganization(org : i_organization);
    setOrganizations(orgs : list<i_organization>);
    clearOrganizations();

    getNote() : i_note;
    setNote(note: i_note);
    clearNote();

    getNickname() : i_nickname;
    setNickname(nickname: i_nickname);
    clearNickname();

    getTitle() : i_title;
    setTitle(title: i_title);
    clearTitle();

    getBirthdays() : list<i_birthday>;
    addBirthday(birthday : i_birthday);
    setBirthdays(birthdays : list<i_birthday>);
    clearBirthdays();

    getCustoms() : list<i_p_m_custom>;
    addCustom(custom: i_p_m_custom);
    setCustoms(customs: list<i_p_m_custom>);
    clearCustoms();

    getPMSign() : i_p_m_sign;
    addPMSign(sign : i_p_m_sign);
    setPMSign(sign: i_p_m_sign);
    clearPMSign();

    getPMEncrypt() : i_p_m_encrypt;
    addPMEncrypt(encrypt : i_p_m_encrypt);
    setPMEncrypt(encrypt: i_p_m_encrypt);
    clearPMEncrypt();

    getPMScheme() : i_p_m_scheme;
    addPMScheme(scheme : i_p_m_scheme);
    setPMScheme(scheme: i_p_m_scheme);
    clearPMScheme();

    getPMMimeType() : i_p_m_mime_type;
    addPMMimeType(mimetype : i_p_m_mime_type);
    setPMMimeType(mimetype: i_p_m_mime_type);
    clearPMMimeType();

    getUrls() : list<i_url>;
    addUrl(url : i_url);
    setUrls(urls : list<i_url>);
    clearUrls();

    getGender() : i_gender;
    setGender(gender: i_gender);
    clearGender();

    getStructuredName() : i_structured_name;
    setStructuredName(name : i_structured_name);
    clearStructuredName();

    static create_instance() : i_v_card;
}

i_ezvcard = interface +c {
    static parse_first(value: string) : i_v_card;
    static parse_all(value: string) : list<i_v_card>;

    static write(vcard: i_v_card) : string;
    static write_all(vcards: list<i_v_card>) : string;
}
