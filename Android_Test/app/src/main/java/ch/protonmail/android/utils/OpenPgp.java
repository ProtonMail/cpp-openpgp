// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from open_pgp.djinni

package ch.protonmail.android.utils;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class OpenPgp {
    /**generat new key pair */
    public abstract OpenPgpKey generateKey();

    /**check is primary key passphrase ok */
    public abstract boolean checkPassphrase(String privateKey, String passphrase);

    /**encrypt message */
    public abstract String encryptMessage(String addressId, String plainText);

    public abstract String decryptMessage(String encryptText, String passphras);

    public abstract EncryptPackage encryptAttachment(String addressId, byte[] unencryptData, String fileName);

    public abstract byte[] decryptAttachment(byte[] key, byte[] data, String passphras);

    /**TODO : not done and not inuse */
    public abstract byte[] decryptAttachmentWithPassword(byte[] key, byte[] data, String password);

    public abstract byte[] getPublicKeySessionKey(byte[] keyPackage, String privateKey, String passphrase);

    public abstract byte[] getSymmetricSessionKey(byte[] keyPackage, String password);

    public abstract byte[] getNewPublicKeyPackage(byte[] session, String publicKey);

    public abstract byte[] getNewSymmetricKeyPackage(byte[] session, String password);

    public abstract String encryptMessageAes(String plainText, String password);

    public abstract String decryptMessageAes(String encryptedMessage, String password);

    public abstract String encryptMailboxPWD(String unencryptedPwd, String salt);

    public abstract String decryptMailboxPWD(String encryptedPwd, String salt);

    public static native OpenPgp createInstance();

    public static native OpenPgp createInstanceWithKeys(ArrayList<OpenPgpKey> keys);

    private static final class CppProxy extends OpenPgp
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public OpenPgpKey generateKey()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_generateKey(this.nativeRef);
        }
        private native OpenPgpKey native_generateKey(long _nativeRef);

        @Override
        public boolean checkPassphrase(String privateKey, String passphrase)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_checkPassphrase(this.nativeRef, privateKey, passphrase);
        }
        private native boolean native_checkPassphrase(long _nativeRef, String privateKey, String passphrase);

        @Override
        public String encryptMessage(String addressId, String plainText)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_encryptMessage(this.nativeRef, addressId, plainText);
        }
        private native String native_encryptMessage(long _nativeRef, String addressId, String plainText);

        @Override
        public String decryptMessage(String encryptText, String passphras)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_decryptMessage(this.nativeRef, encryptText, passphras);
        }
        private native String native_decryptMessage(long _nativeRef, String encryptText, String passphras);

        @Override
        public EncryptPackage encryptAttachment(String addressId, byte[] unencryptData, String fileName)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_encryptAttachment(this.nativeRef, addressId, unencryptData, fileName);
        }
        private native EncryptPackage native_encryptAttachment(long _nativeRef, String addressId, byte[] unencryptData, String fileName);

        @Override
        public byte[] decryptAttachment(byte[] key, byte[] data, String passphras)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_decryptAttachment(this.nativeRef, key, data, passphras);
        }
        private native byte[] native_decryptAttachment(long _nativeRef, byte[] key, byte[] data, String passphras);

        @Override
        public byte[] decryptAttachmentWithPassword(byte[] key, byte[] data, String password)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_decryptAttachmentWithPassword(this.nativeRef, key, data, password);
        }
        private native byte[] native_decryptAttachmentWithPassword(long _nativeRef, byte[] key, byte[] data, String password);

        @Override
        public byte[] getPublicKeySessionKey(byte[] keyPackage, String privateKey, String passphrase)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPublicKeySessionKey(this.nativeRef, keyPackage, privateKey, passphrase);
        }
        private native byte[] native_getPublicKeySessionKey(long _nativeRef, byte[] keyPackage, String privateKey, String passphrase);

        @Override
        public byte[] getSymmetricSessionKey(byte[] keyPackage, String password)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSymmetricSessionKey(this.nativeRef, keyPackage, password);
        }
        private native byte[] native_getSymmetricSessionKey(long _nativeRef, byte[] keyPackage, String password);

        @Override
        public byte[] getNewPublicKeyPackage(byte[] session, String publicKey)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getNewPublicKeyPackage(this.nativeRef, session, publicKey);
        }
        private native byte[] native_getNewPublicKeyPackage(long _nativeRef, byte[] session, String publicKey);

        @Override
        public byte[] getNewSymmetricKeyPackage(byte[] session, String password)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getNewSymmetricKeyPackage(this.nativeRef, session, password);
        }
        private native byte[] native_getNewSymmetricKeyPackage(long _nativeRef, byte[] session, String password);

        @Override
        public String encryptMessageAes(String plainText, String password)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_encryptMessageAes(this.nativeRef, plainText, password);
        }
        private native String native_encryptMessageAes(long _nativeRef, String plainText, String password);

        @Override
        public String decryptMessageAes(String encryptedMessage, String password)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_decryptMessageAes(this.nativeRef, encryptedMessage, password);
        }
        private native String native_decryptMessageAes(long _nativeRef, String encryptedMessage, String password);

        @Override
        public String encryptMailboxPWD(String unencryptedPwd, String salt)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_encryptMailboxPWD(this.nativeRef, unencryptedPwd, salt);
        }
        private native String native_encryptMailboxPWD(long _nativeRef, String unencryptedPwd, String salt);

        @Override
        public String decryptMailboxPWD(String encryptedPwd, String salt)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_decryptMailboxPWD(this.nativeRef, encryptedPwd, salt);
        }
        private native String native_decryptMailboxPWD(long _nativeRef, String encryptedPwd, String salt);
    }
}
