// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from open_pgp.djinni

package ch.protonmail.android.utils;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class OpenPgp {
    /**generat new key pair */
    public abstract OpenPgpKey generateKey();

    /**check is primary key passphrase ok */
    public abstract boolean checkPassphrase(String privateKey, String passphrase);

    /**encrypt message */
    public abstract String encryptMessage(String addressId, String planText);

    public abstract String decryptMessage(String encryptText, String passphras);

    public abstract byte[] encryptAttachment(String addressId, String planText);

    public abstract String decryptAttachment(String encryptText, String passphras);

    public static native OpenPgp createInstance();

    public static native OpenPgp createInstanceWithKeys(ArrayList<OpenPgpKey> keys);

    private static final class CppProxy extends OpenPgp
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public OpenPgpKey generateKey()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_generateKey(this.nativeRef);
        }
        private native OpenPgpKey native_generateKey(long _nativeRef);

        @Override
        public boolean checkPassphrase(String privateKey, String passphrase)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_checkPassphrase(this.nativeRef, privateKey, passphrase);
        }
        private native boolean native_checkPassphrase(long _nativeRef, String privateKey, String passphrase);

        @Override
        public String encryptMessage(String addressId, String planText)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_encryptMessage(this.nativeRef, addressId, planText);
        }
        private native String native_encryptMessage(long _nativeRef, String addressId, String planText);

        @Override
        public String decryptMessage(String encryptText, String passphras)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_decryptMessage(this.nativeRef, encryptText, passphras);
        }
        private native String native_decryptMessage(long _nativeRef, String encryptText, String passphras);

        @Override
        public byte[] encryptAttachment(String addressId, String planText)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_encryptAttachment(this.nativeRef, addressId, planText);
        }
        private native byte[] native_encryptAttachment(long _nativeRef, String addressId, String planText);

        @Override
        public String decryptAttachment(String encryptText, String passphras)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_decryptAttachment(this.nativeRef, encryptText, passphras);
        }
        private native String native_decryptAttachment(long _nativeRef, String encryptText, String passphras);
    }
}
