// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from open_pgp.djinni

#import "PMNIKey+Private.h"
#import "PMNIKey.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface PMNIKey ()

- (id)initWithCpp:(const std::shared_ptr<::ProtonMail::IKey>&)cppRef;

@end

@implementation PMNIKey {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ProtonMail::IKey>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ProtonMail::IKey>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSString *)getText {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getText();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setText:(nonnull NSString *)text {
    try {
        _cppRefHandle.get()->setText(::djinni::String::toCpp(text));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)getBinary {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getBinary();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setBinary:(nonnull NSData *)data {
    try {
        _cppRefHandle.get()->setBinary(::djinni::Binary::toCpp(data));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getGroup {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getGroup();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setGroup:(nonnull NSString *)g {
    try {
        _cppRefHandle.get()->setGroup(::djinni::String::toCpp(g));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getPref {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPref();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPref:(int32_t)pref {
    try {
        _cppRefHandle.get()->setPref(::djinni::I32::toCpp(pref));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace OBJ_ProtonMail {

auto IKey::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto IKey::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<PMNIKey>(cpp);
}

}  // namespace OBJ_ProtonMail

@end
