// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from open_pgp.djinni

#include "NativeOpenPgp.hpp"  // my header
#include "NativeEncryptPackage.hpp"
#include "NativeOpenPgp.hpp"
#include "NativeOpenPgpKey.hpp"
#include "jni_base/Marshal.hpp"

namespace ProtonMail {

NativeOpenPgp::NativeOpenPgp() : ::djinni::JniInterface<::ProtonMail::OpenPgp, NativeOpenPgp>("ch/protonmail/android/utils/OpenPgp$CppProxy") {}

NativeOpenPgp::~NativeOpenPgp() = default;


CJNIEXPORT void JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<djinni::CppProxyHandle<::ProtonMail::OpenPgp>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_ch_protonmail_android_utils_OpenPgp_createInstance(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::ProtonMail::OpenPgp::CreateInstance();
        return ::djinni::release(::ProtonMail::NativeOpenPgp::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_ch_protonmail_android_utils_OpenPgp_createInstanceWithKeys(JNIEnv* jniEnv, jobject /*this*/, jobject j_keys)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::ProtonMail::OpenPgp::CreateInstanceWithKeys(::djinni::List<::ProtonMail::NativeOpenPgpKey>::toCpp(jniEnv, j_keys));
        return ::djinni::release(::ProtonMail::NativeOpenPgp::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_native_1generateKey(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ProtonMail::OpenPgp>(nativeRef);
        auto r = ref->GenerateKey();
        return ::djinni::release(::ProtonMail::NativeOpenPgpKey::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_native_1checkPassphrase(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_privateKey, jstring j_passphrase)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ProtonMail::OpenPgp>(nativeRef);
        auto r = ref->CheckPassphrase(::djinni::String::toCpp(jniEnv, j_privateKey),
                                      ::djinni::String::toCpp(jniEnv, j_passphrase));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_native_1encryptMessage(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_addressId, jstring j_plainText)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ProtonMail::OpenPgp>(nativeRef);
        auto r = ref->EncryptMessage(::djinni::String::toCpp(jniEnv, j_addressId),
                                     ::djinni::String::toCpp(jniEnv, j_plainText));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_native_1decryptMessage(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_encryptText, jstring j_passphras)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ProtonMail::OpenPgp>(nativeRef);
        auto r = ref->DecryptMessage(::djinni::String::toCpp(jniEnv, j_encryptText),
                                     ::djinni::String::toCpp(jniEnv, j_passphras));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_native_1encryptAttachment(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_addressId, jbyteArray j_unencryptData, jstring j_fileName)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ProtonMail::OpenPgp>(nativeRef);
        auto r = ref->EncryptAttachment(::djinni::String::toCpp(jniEnv, j_addressId),
                                        ::djinni::Binary::toCpp(jniEnv, j_unencryptData),
                                        ::djinni::String::toCpp(jniEnv, j_fileName));
        return ::djinni::release(::ProtonMail::NativeEncryptPackage::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyteArray JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_native_1decryptAttachment(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jbyteArray j_key, jbyteArray j_data, jstring j_passphras)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ProtonMail::OpenPgp>(nativeRef);
        auto r = ref->DecryptAttachment(::djinni::Binary::toCpp(jniEnv, j_key),
                                        ::djinni::Binary::toCpp(jniEnv, j_data),
                                        ::djinni::String::toCpp(jniEnv, j_passphras));
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyteArray JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_native_1decryptAttachmentWithPassword(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jbyteArray j_key, jbyteArray j_data, jstring j_password)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ProtonMail::OpenPgp>(nativeRef);
        auto r = ref->DecryptAttachmentWithPassword(::djinni::Binary::toCpp(jniEnv, j_key),
                                                    ::djinni::Binary::toCpp(jniEnv, j_data),
                                                    ::djinni::String::toCpp(jniEnv, j_password));
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyteArray JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_native_1getPublicKeySessionKey(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jbyteArray j_keyPackage, jstring j_privateKey, jstring j_passphrase)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ProtonMail::OpenPgp>(nativeRef);
        auto r = ref->GetPublicKeySessionKey(::djinni::Binary::toCpp(jniEnv, j_keyPackage),
                                             ::djinni::String::toCpp(jniEnv, j_privateKey),
                                             ::djinni::String::toCpp(jniEnv, j_passphrase));
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyteArray JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_native_1getSymmetricSessionKey(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jbyteArray j_keyPackage, jstring j_password)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ProtonMail::OpenPgp>(nativeRef);
        auto r = ref->GetSymmetricSessionKey(::djinni::Binary::toCpp(jniEnv, j_keyPackage),
                                             ::djinni::String::toCpp(jniEnv, j_password));
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyteArray JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_native_1getNewPublicKeyPackage(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jbyteArray j_session, jstring j_publicKey)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ProtonMail::OpenPgp>(nativeRef);
        auto r = ref->GetNewPublicKeyPackage(::djinni::Binary::toCpp(jniEnv, j_session),
                                             ::djinni::String::toCpp(jniEnv, j_publicKey));
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyteArray JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_native_1getNewSymmetricKeyPackage(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jbyteArray j_session, jstring j_password)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ProtonMail::OpenPgp>(nativeRef);
        auto r = ref->GetNewSymmetricKeyPackage(::djinni::Binary::toCpp(jniEnv, j_session),
                                                ::djinni::String::toCpp(jniEnv, j_password));
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_native_1encryptMessageAes(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_plainText, jstring j_password)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ProtonMail::OpenPgp>(nativeRef);
        auto r = ref->EncryptMessageAes(::djinni::String::toCpp(jniEnv, j_plainText),
                                        ::djinni::String::toCpp(jniEnv, j_password));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_native_1decryptMessageAes(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_encryptedMessage, jstring j_password)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ProtonMail::OpenPgp>(nativeRef);
        auto r = ref->DecryptMessageAes(::djinni::String::toCpp(jniEnv, j_encryptedMessage),
                                        ::djinni::String::toCpp(jniEnv, j_password));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_native_1encryptMailboxPWD(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_unencryptedPwd, jstring j_salt)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ProtonMail::OpenPgp>(nativeRef);
        auto r = ref->EncryptMailboxPWD(::djinni::String::toCpp(jniEnv, j_unencryptedPwd),
                                        ::djinni::String::toCpp(jniEnv, j_salt));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_ch_protonmail_android_utils_OpenPgp_00024CppProxy_native_1decryptMailboxPWD(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_encryptedPwd, jstring j_salt)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ProtonMail::OpenPgp>(nativeRef);
        auto r = ref->DecryptMailboxPWD(::djinni::String::toCpp(jniEnv, j_encryptedPwd),
                                        ::djinni::String::toCpp(jniEnv, j_salt));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace ProtonMail
